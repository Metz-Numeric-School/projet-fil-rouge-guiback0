{{ form_start(form, {'attr': {'novalidate': 'novalidate', 'id': 'serviceForm', 'class': 'needs-validation'}}) }}
    <div class="row g-4">
        <!-- Informations générales -->
        <div class="col-12">
            <h6 class="text-primary mb-3">
                <i class="bi bi-briefcase"></i>
                Informations générales
            </h6>
        </div>
        
        <div class="col-md-8">
            {{ form_row(form.nom_service, {
                'label': 'Nom du service *',
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'Nom du service'
                }
            }) }}
        </div>
        
        <div class="col-md-4">
            {{ form_row(form.niveau_service, {
                'label': 'Niveau du service',
                'attr': {
                    'class': 'form-control',
                    'placeholder': 'Niveau (1-5)',
                    'min': '1',
                    'max': '5'
                }
            }) }}
        </div>

        {% if form.organisation is defined %}
        <div class="col-12">
            {{ form_row(form.organisation, {
                'label': 'Organisation *',
                'attr': {
                    'class': 'form-select'
                }
            }) }}
        </div>
        {% endif %}

        {{ form_rest(form) }}
        
        <div class="col-12">
            <div class="d-flex justify-content-end gap-2 mt-4">
                <a href="{{ organisation is defined ? path('app_organisation_show', {'id': organisation.id}) : path('app_service_show', {'id': service.id}) }}" class="btn btn-secondary">
                    <i class="bi bi-x-circle"></i> Annuler
                </a>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    <i class="bi bi-check-circle"></i> {{ button_label|default('Enregistrer') }}
                </button>
            </div>
        </div>
    </div>
{{ form_end(form) }}

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('serviceForm');
    const submitBtn = document.getElementById('submitBtn');
    const spinner = submitBtn.querySelector('.spinner-border');
    
    // Real-time validation
    const inputs = form.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
        input.addEventListener('blur', function() {
            validateField(this);
        });
        
        input.addEventListener('input', function() {
            if (this.classList.contains('is-invalid')) {
                validateField(this);
            }
        });
    });
    
    // Form submission
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        let isValid = true;
        inputs.forEach(input => {
            if (!validateField(input)) {
                isValid = false;
            }
        });
        
        if (isValid) {
            // Show loading state
            submitBtn.disabled = true;
            spinner.classList.remove('d-none');
            
            // Submit form
            this.submit();
        } else {
            // Scroll to first error
            const firstError = form.querySelector('.is-invalid');
            if (firstError) {
                firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                firstError.focus();
            }
        }
    });
    
    function validateField(field) {
        const value = field.value.trim();
        const fieldName = field.name;
        let isValid = true;
        let errorMessage = '';
        
        // Clear previous validation states
        field.classList.remove('is-valid', 'is-invalid');
        const feedback = field.parentNode.querySelector('.invalid-feedback');
        if (feedback) feedback.remove();
        
        // Required field validation
        if (field.hasAttribute('required') && !value) {
            isValid = false;
            errorMessage = 'Ce champ est obligatoire.';
        }
        
        // Service name validation
        else if (fieldName.includes('nom_service') && value) {
            if (value.length < 2) {
                isValid = false;
                errorMessage = 'Le nom du service doit contenir au moins 2 caractères.';
            }
        }
        
        // Service level validation
        else if (fieldName.includes('niveau_service') && value) {
            const level = parseInt(value);
            if (isNaN(level) || level < 1 || level > 5) {
                isValid = false;
                errorMessage = 'Le niveau doit être un nombre entre 1 et 5.';
            }
        }
        
        // Apply validation result
        if (isValid && value) {
            field.classList.add('is-valid');
        } else if (!isValid) {
            field.classList.add('is-invalid');
            
            // Add error message
            const errorDiv = document.createElement('div');
            errorDiv.className = 'invalid-feedback';
            errorDiv.textContent = errorMessage;
            field.parentNode.appendChild(errorDiv);
        }
        
        return isValid;
    }
});
</script>
