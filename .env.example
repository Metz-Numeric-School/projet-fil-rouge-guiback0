# =================================================
# Access MNS - Configuration Docker Compose
# =================================================
# 
# Ce fichier contient toutes les variables d'environnement nécessaires
# pour configurer et déployer l'application Access MNS avec Docker Compose.
# 
# Instructions :
# 1. Copier ce fichier vers .env : cp .env.example .env
# 2. Modifier les valeurs selon vos besoins
# 3. Lancer Docker Compose : docker-compose up --build
#

# =================================================
# CONFIGURATION DES PORTS
# =================================================

# Port du frontend Angular (accès direct)
CLIENT_PORT=4200

# Port du backend Symfony (accès direct)
MANAGER_PORT=8000

# Ports du proxy Nginx (point d'entrée principal)
PROXY_HTTP_PORT=80
PROXY_HTTPS_PORT=443

# =================================================
# CONFIGURATION DES CONTENEURS
# =================================================

# Noms des conteneurs Docker
DATABASE_CONTAINER_NAME=access_mns_database
MANAGER_CONTAINER_NAME=access_mns_manager
CLIENT_CONTAINER_NAME=access_mns_client
PROXY_CONTAINER_NAME=access_mns_proxy

# =================================================
# CONFIGURATION BASE DE DONNÉES (PostgreSQL)
# =================================================

# Version de PostgreSQL
POSTGRES_VERSION=16

# Nom de la base de données
POSTGRES_DB=access_mns

# Utilisateur de la base de données
POSTGRES_USER=postgres

# Mot de passe de la base de données
# ⚠️ IMPORTANT : Changez ce mot de passe pour la production !
POSTGRES_PASSWORD=secure-password-change-this-in-production

# URL de connexion à la base de données (utilisée par Symfony)
DATABASE_URL=postgresql://access_mns_user:secure-password-change-this-in-production@database:5432/access_mns?serverVersion=16&charset=utf8

# =================================================
# CONFIGURATION SYMFONY (Backend)
# =================================================

# Environnement Symfony (dev, prod, test)
APP_ENV=dev

# Secret de l'application Symfony
# ⚠️ IMPORTANT : Générez un secret unique pour la production !
# Vous pouvez utiliser : php -r "echo base64_encode(random_bytes(32));"
APP_SECRET=your-secret-key-change-this-in-production

# Version de Symfony
SYMFONY_VERSION=7.0.*

# =================================================
# CONFIGURATION MERCURE (WebSocket/Temps réel)
# =================================================

# Clé JWT pour Mercure (Publisher)
# ⚠️ IMPORTANT : Changez cette clé pour la production !
MERCURE_PUBLISHER_JWT_KEY=!ChangeThisMercureHubJWTSecretKey!

# Clé JWT pour Mercure (Subscriber)
# ⚠️ IMPORTANT : Changez cette clé pour la production !
MERCURE_SUBSCRIBER_JWT_KEY=!ChangeThisMercureHubJWTSecretKey!

# Secret JWT pour Mercure
# ⚠️ IMPORTANT : Changez cette clé pour la production !
MERCURE_JWT_SECRET=!ChangeThisMercureHubJWTSecretKey!

# =================================================
# CONFIGURATION PROXY INVERSE
# =================================================

# Adresses IP de confiance pour le proxy inverse
# Ces adresses couvrent les réseaux Docker standard
TRUSTED_PROXIES=127.0.0.1,172.16.0.0/12,10.0.0.0/8,192.168.0.0/16

# =================================================
# CONFIGURATION DÉVELOPPEMENT
# =================================================

# Mode Xdebug (off, debug, coverage, trace)
XDEBUG_MODE=off

# Environment Node.js pour le frontend
NODE_ENV=production

# =================================================
# NOTES IMPORTANTES
# =================================================
#
# SÉCURITÉ PRODUCTION :
# - Changez TOUS les mots de passe et secrets
# - Utilisez APP_ENV=prod pour la production
# - Générez un APP_SECRET unique et sécurisé
# - Utilisez des mots de passe forts pour PostgreSQL
# - Changez les clés JWT Mercure
#
# ACCÈS AUX APPLICATIONS :
# - Frontend (Angular) : http://localhost ou http://localhost:4200
# - Backend Manager : http://localhost/manager/
# - API Backend : http://localhost/api/
# - Backend Direct : http://localhost:8000
# - Base de données : localhost:5432
#
# COMMANDES UTILES :
# - Démarrer : docker-compose up --build
# - Arrêter : docker-compose down
# - Voir les logs : docker-compose logs
# - Accéder au backend : docker-compose exec backend bash
# - Accéder à la DB : docker-compose exec database psql -U access_mns_user -d access_mns
#
